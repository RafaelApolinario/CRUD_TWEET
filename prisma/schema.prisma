generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id           String   @id @default(uuid()) @db.Uuid
  nome         String   @db.VarChar(255)
  usuario      String   @unique @db.VarChar(255)
  email        String   @unique @db.VarChar(150)
  senha        String   @db.Text
  auth_token   String?  @db.Text
  criadoEm     DateTime @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm DateTime @updatedAt @map("atualizado_em") @db.Timestamp()

  seguidores Seguidores[] @relation("seguidores")
  seguindo   Seguidores[] @relation("seguindo")
  tweets     Tweets[]
  likes      Likes?
  retweets   Retweets[]
  replies    Reply[]

  @@map("usuarios")
}

model Seguidores {
  id String @id @default(uuid()) @db.Uuid

  usuarioId String   @map("usuario_id") @db.Uuid
  usuario   Usuarios @relation("seguindo", fields: [usuarioId], references: [id])

  seguidorId String   @map("seguidor_id") @db.Uuid
  seguidor   Usuarios @relation("seguidores", fields: [seguidorId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm DateTime @updatedAt @map("atualizado_em") @db.Timestamp()

  @@map("seguidores")
}

model Tweets {
  id      String @id @default(uuid()) @db.Uuid
  content String @db.VarChar(400)
  type    String @db.VarChar(8)

  usuarioId String   @map("usuario_id") @db.Uuid
  usuario   Usuarios @relation(fields: [usuarioId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm DateTime @updatedAt @map("atualizado_em") @db.Timestamp()

  likes    Likes[]
  retweets Retweets[]
  replies  Reply[]

  @@map("tweets")
}

model Reply {
  id      String @id @default(uuid()) @db.Uuid
  content String @db.VarChar(400)

  tweets   Tweets? @relation(fields: [tweetsId], references: [id])
  tweetsId String? @db.Uuid

  usuarios   Usuarios? @relation(fields: [usuariosId], references: [id])
  usuariosId String?   @db.Uuid

  criadoEm     DateTime @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm DateTime @updatedAt @map("atualizado_em") @db.Timestamp()

  likes Likes[]

  @@map("replies")
}

model Likes {
  id String @id @default(uuid()) @db.Uuid

  usuarioId String   @unique @map("usuario_id") @db.Uuid
  usuario   Usuarios @relation(fields: [usuarioId], references: [id])

  tweetId String? @map("tweet_id") @db.Uuid
  tweet   Tweets? @relation(fields: [tweetId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm DateTime @updatedAt @map("atualizado_em") @db.Timestamp()
  reply        Reply?   @relation(fields: [replyId], references: [id])
  replyId      String?  @db.Uuid

  @@map("likes")
}

model Retweets {
  id String @id @default(uuid()) @db.Uuid

  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweets @relation(fields: [tweetId], references: [id])

  usuarioId String   @unique @map("usuario_id") @db.Uuid
  usuario   Usuarios @relation(fields: [usuarioId], references: [id])

  criadoEm     DateTime @default(now()) @map("criado_em") @db.Timestamp()
  atualizadoEm DateTime @updatedAt @map("atualizado_em") @db.Timestamp()

  @@map("retweets")
}
